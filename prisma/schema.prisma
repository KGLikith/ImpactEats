generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Organisation
  Volunteer
  Donor
}

model User {
  id           String         @id @default(cuid())
  fullName     String
  email        String         @unique
  imageUrl     String?
  type         UserType?
  clerkId      String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Organisation Organisation?
  Volunteer    Volunteer?
  Donor        Donor?
  Notification Notification[]
  history      History[]
}

model Organisation {
  id          String      @id @default(cuid())
  name        String
  email       String      @unique
  phone       String
  address     String
  imageUrl    String?
  website     String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String      @unique
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  claims      Claim[]
  request     Request[]
  volunteers  Volunteer[]

  @@index([userId, id])
}

model Volunteer {
  id            String         @id @default(cuid())
  name          String
  phone         String
  email         String?        @unique
  address       String
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String         @unique
  User          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  task          Task[]
  organisations Organisation[]

  @@index([userId, id])
}

model Donor {
  id        String     @id @default(cuid())
  name      String
  phone     String
  email     String?    @unique
  address   String
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  donations Donation[]

  @@index([userId, id])
}

enum FoodType {
  RAW
  COOKED
  PACKAGED
}

enum Status {
  PENDING
  CLAIMED
  COMPLETED
  CANCELLED
}

model Donation {
  id                   String       @id @default(cuid())
  name                 String
  description          String?
  imageUrl             String?
  foodType             FoodType     @default(RAW)
  address              String
  email                String
  phone                String
  additionDeliveryNote String?
  quantity             Float
  quantityUnit         QuantityUnit @default(PERSON)
  availableDate        String
  availableTime        String
  expiryTime           String
  expiryDate           String
  status               Status       @default(PENDING)
  deliveryOption       Boolean      @default(false)
  deliveryType         DeliveryType @default(PICKUP)
  donorId              String?
  donor                Donor?       @relation(fields: [donorId], references: [id], onDelete: SetNull)
  claim                Claim?
  request              Request?     @relation(fields: [requestId], references: [id], onDelete: SetNull)
  requestId            String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  History              History[]
}

enum DeliveryType {
  SELF
  PICKUP
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String //donation, volunteering, donation
  action    String //completed, claimed , cancelled, etc
  header    String
  message   String
  link      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model History {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  action      String //completed, claimed , cancelled, etc
  header      String
  description String?
  message     String
  donationId  String?
  timing      String?
  donation    Donation? @relation(fields: [donationId], references: [id], onDelete: SetNull)
  type        String //donation, volunteering, donation
  link        String? //checkout the donation or whatever it is 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Request {
  id             String        @id @default(cuid())
  organisationId String
  Organisation   Organisation  @relation(fields: [organisationId], references: [id], onDelete: Cascade)
  foodType       FoodType      @default(RAW)
  quantity       Float
  name           String
  quantityUnit   QuantityUnit  @default(PERSON)
  description    String?
  requiredDate   String
  requiredTime   String
  status         RequestStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  donation       Donation[]
}

enum RequestStatus {
  PENDING
  DONATED
  COMPLETED
}

model Claim {
  id             String       @id @default(cuid())
  status         ClaimStatus       @default(CLAIMED)
  task           Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId         String       @unique
  organisationId String
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  donationId     String       @unique
  donation       Donation     @relation(fields: [donationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum ClaimStatus {
  CLAIMED
  ASSIGNED
  RECIEVED
  CANCELLED
}

model Task {
  id          String     @id @default(cuid())
  volunteerId String
  volunteer   Volunteer  @relation(fields: [volunteerId], references: [id])
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Claim       Claim?
}

enum TaskStatus {
  PENDING
  RECIEVED
  CANCELLED
  COMPLETED
}

enum QuantityUnit {
  WEIGHT
  PERSON
}
